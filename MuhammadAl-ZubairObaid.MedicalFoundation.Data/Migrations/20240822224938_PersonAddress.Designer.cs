// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuhammadAl_ZubairObaid.MedicalFoundation.Contexts;

#nullable disable

namespace MuhammadAl_ZubairObaid.MedicalFoundation.Data.Migrations
{
    [DbContext(typeof(MedicalFoundationDBContext))]
    [Migration("20240822224938_PersonAddress")]
    partial class PersonAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.ClinicAppointment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BillingID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("BillingID");

                    b.ToTable("ClinicAppointments");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Clinician", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmailID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FullNameID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("NumberID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Specialization")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WorkingShiftID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("EmailID");

                    b.HasIndex("FullNameID");

                    b.HasIndex("NumberID");

                    b.HasIndex("WorkingShiftID");

                    b.ToTable("Clinicians");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Patient", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EmailID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("NameID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PhoneNumberID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("EmailID");

                    b.HasIndex("NameID");

                    b.HasIndex("PhoneNumberID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.PatientVisit", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClinicianID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("ClinicianID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientVisits");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.Billing", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.EmailAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EmailAddress");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PersonAddress", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Country")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("PersonAddress");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PersonName", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("PersonName");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PhoneNumber", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegionalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.WorkingShift", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("EndDay")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartDay")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("WorkingShift");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.ClinicAppointment", b =>
                {
                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.Billing", "Billing")
                        .WithMany()
                        .HasForeignKey("BillingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Clinician", b =>
                {
                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PersonAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.EmailAddress", "Email")
                        .WithMany()
                        .HasForeignKey("EmailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PersonName", "FullName")
                        .WithMany()
                        .HasForeignKey("FullNameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PhoneNumber", "Number")
                        .WithMany()
                        .HasForeignKey("NumberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.WorkingShift", "WorkingShift")
                        .WithMany()
                        .HasForeignKey("WorkingShiftID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("FullName");

                    b.Navigation("Number");

                    b.Navigation("WorkingShift");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Patient", b =>
                {
                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PersonAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.EmailAddress", "Email")
                        .WithMany()
                        .HasForeignKey("EmailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PersonName", "Name")
                        .WithMany()
                        .HasForeignKey("NameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Primitives.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Email");

                    b.Navigation("Name");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.PatientVisit", b =>
                {
                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.ClinicAppointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Clinician", "Clinician")
                        .WithMany()
                        .HasForeignKey("ClinicianID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Patient", null)
                        .WithMany("Visits")
                        .HasForeignKey("PatientID");

                    b.Navigation("Appointment");

                    b.Navigation("Clinician");
                });

            modelBuilder.Entity("MuhammadAl_ZubairObaid.MedicalFoundation.Domain.Patient", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
